------------------------------------------------------------------Git Cheat Sheet----------------------------------------------------------------------------


this is configuration step if you install git first time in your computer

1. git config --global user.name "name"
2. git config --global user.email "nitesh34@gmail.com"
3. git config --list

this is for some additional method

1. q --- if you want to quite a lines press q
2. git clone link <-- it is use for make a tensorflow type repository in your git repository;


-------------------------------------------------------------------------------------------------------------------------------------------------------------


0. clear                     <---- it is used to clear you terminal in git;
    
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------

1. git status                <--- it is used to check a status in your git;
    
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------

2. git init                  <--- it used to make a repository in git;
   
   
-------------------------------------------------------------------------------------------------------------------------------------------------------------
  
3. git add -- a              <--- it used to track and add in you repository;
    
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------    
4. git add .                 <--- it is a short cut , and it used to track and add in you repository; 


-------------------------------------------------------------------------------------------------------------------------------------------------------------


4. git add filename           <---- it is used to add any file in repository one by one;
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------    
    
5. git commit -m "commit here"    <---- it used to commit a file in repository; 
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------   
    
6. git log                     <--- if you want to check your all commit use it;
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------   
    
7. rm -rf.git                  <--- it is used to delete your repository !danger;
      
-------------------------------------------------------------------------------------------------------------------------------------------------------------

8. pwd                         <--- it is used to check your current working directory; 
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------      
9. ls                          <--- it is used to check your current working directory files;
       
-------------------------------------------------------------------------------------------------------------------------------------------------------------    

10. cd                         <--- it is used to change your current working directory;
     
-------------------------------------------------------------------------------------------------------------------------------------------------------------

    
11. touch nitesh.log           <--- it is used to create a file in your repository;
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------

12. touch   .gitignore      <--- ( gitignore file ignore all file , for example if you want to ignore all log files 

so write *.log in your gitignore file then git won't track the all log files); ! sometime .gitignore won't 

work because if file have already track then  .gitigonore won't work  so you have to first untracked you 

files;
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------

    
13. git diff                     <--- it is used to compare working directory to staging area; 
    
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------

    
14. git diff --staged            <--- it is used to compare previous working directory to staging area ; 
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------

        
15. git commit -a -m "commit"    <--- it is used to commit a file without adding a file in repository; 
       
-------------------------------------------------------------------------------------------------------------------------------------------------------------


16. git rm filename                <--- it is used to delete a file in git repository;
   
-------------------------------------------------------------------------------------------------------------------------------------------------------------

17. git mv filename file change name    <--- it is used to move a file in folder; 
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------


17. git mv filename file change name      <--- it is also used to rename a file in git repository;
     
-------------------------------------------------------------------------------------------------------------------------------------------------------------


18. git rm --cached filename            <--- it is used to untracked your file in git repository; 
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------


19. git log -p                         <--- it is used to see what type of code and line add and remove in commit;
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------

   
20. git log -p  -2                       <--- it is used to see what type of code and line add and remove in commit; if you write 2,3 ahead of -p it will show

only -2 or -3 commit only;
    
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------

    
20. git  log  --stat              <--- it is used to see what type of code and line add and remove in commit in a 

short way ; 


-------------------------------------------------------------------------------------------------------------------------------------------------------------



21. git log --pretty=oneline                      <--- it   is used to see your commit in one line;
    

-------------------------------------------------------------------------------------------------------------------------------------------------------------

        
21. git log --pretty=short         <--- it is used to see your commit in short line ; if you write full a ahead short in will get more details about commit; 
       
-------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    
22. git log since=2.days           <--- it is used to see your commit of last 2 days; if you write month , years a ahead of days it will show you last month

and years commit;
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------         
23. git log --pretty=format:"%h -- %an"     <--- it is used to see your commit details like author name , author email and more things in one line ; in this

line an means author name you can use ae for author email;
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------


24. git commit --amend     <--- it is used to change your and other person commit; if you write 24 number line then press i button to commit; (->this is quit

method and then press esc button then : and then wq for quit);


-------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 25. git restore --staged  filename         <--- it is used to unstage the staged file;
 
 
-------------------------------------------------------------------------------------------------------------------------------------------------------------

 26. git checkout -- filename.txt          <--- it is used to restore your previous data in your file;
 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 27. git checkout  -f                     <--- it is used to back ot  your previous working directory ;
 
 
-------------------------------------------------------------------------------------------------------------------------------------------------------------

 
 28. git remote                            <--- it is used to check do you have a remote in git ;
 
 
-------------------------------------------------------------------------------------------------------------------------------------------------------------

 
 29. git remote -v                    <--- it will show you two method 1 push and  2 feach/pull;
 
 
-------------------------------------------------------------------------------------------------------------------------------------------------------------

 
 30. git push -u  origin main      <--- it is used to push you data in github repositroy; !and also use for this

 pull your data in github;
 
 
-------------------------------------------------------------------------------------------------------------------------------------------------------------

 
 31. git cofig --global  alias.st   status      <--- it is used to convert big command into a short commands;

like git status ->  git st
 
 
-------------------------------------------------------------------------------------------------------------------------------------------------------------


32. git checkout  -b  any-branch-name        <--- it is used to create a new branch in git;
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
 33. git checkout   any-branch-name        <--- it is used to go to that branch where you want to go; 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
 34. git branch                             <--- it will show all all branches in you git; 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------

 
 35. git  merge  any-branch-name        <--- it is used to merge master branch to another branch like

 which branch do you want to add; 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------


 
 36. git branch  -v                          <--- it will show last commit of  merge branch; 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------


 
 37. git branch   --merged                    <--- it will show already  merged branch; 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------

 
 
 38. git branch   --no-merged                 <--- it will show you the merge branch that is no merged; 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------

 
 
 39. git branch   -d   any-branch-name       <--- it is used to delete already merge branch; 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------



 
40. git branch   -D   any-branch-name       <--- it is used to delete that branch which is not merge; 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                       there are two types of  branches

1. long running branches
2. topic branches

 
41. git push  origin  BranchName      <--- it is used to push second branch on github; 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------


 
42. git push -d  origin  BranchName      <--- it is used to delete branch on github; 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------